{
    "queries_and_alerts": [
      {
        "name": "repeated_failed_login_attempts",
        "description": "Repeated failed login attempts could indicate an attacker trying to brute force access to your lakehouse. The following query can be used to detect repeated failed login attempts over a 60 minute period within the last 24 hours.",
        "query": "SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, ifnull(user_identity.email, request_params.user) AS email,  collect_set(action_name) AS action_names, collect_set(response.error_message) AS error_messages, collect_set(response.status_code) AS response_codes, count(*) AS total FROM system.access.audit WHERE action_name IN ('aadBrowserLogin', 'aadTokenLogin', 'certLogin', 'jwtLogin', 'login', 'oidcBrowserLogin', 'samlLogin', 'tokenLogin') AND response.status_code IN (401, 403) AND WINDOW(event_time, '60 minutes').end >= current_timestamp() - INTERVAL 24 HOURS GROUP BY 1, 2, 3 ORDER BY total DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "repeated_failed_login_attempts",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following failed login attempts within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "1"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "failed_login_attempts_last_90_days",
        "description": "Repeated failed login attempts could indicate an attacker trying to brute force access to your lakehouse.",
        "query": "SELECT event_date, ifnull(user_identity.email, request_params.user) AS email, workspace_id, action_name, count(*) AS num_failed_logins FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND action_name IN ('aadBrowserLogin', 'aadTokenLogin', 'certLogin', 'jwtLogin', 'login', 'oidcBrowserLogin', 'samlLogin', 'tokenLogin') AND response.status_code IN (401, 403) GROUP BY 1, 2, 3, 4 ORDER BY event_date DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
      {
        "name": "changes_to_admin_users",
        "description": "Databricks account and workspace admins should be limited to a few very trusted individuals responsible for managing the deployment. The granting of new admin privileges should be reviewed. The following query can be used to detect changes to admin users within the last 24 hours.",
        "query": "SELECT event_time, workspace_id, user_identity.email, lower(replace(audit_level, '_LEVEL', '')) AS account_or_workspace, action_name, request_params.targetUserName, request_params.targetGroupName, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND (action_name IN ('setAccountAdmin', 'changeAccountOwner', 'setAdmin', 'removeAdmin') OR (action_name IN ('addPrincipalToGroup', 'removePrincipalFromGroup') AND request_params.targetGroupName = 'admins')) GROUP BY 1, 2, 3, 4, 5, 6, 7 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "changes_to_admin_users",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following changes to admin users within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "changes_to_workspace_configuration",
        "description": "Many workspace-level configurations perform a security-enforcing function. The following SQL query can be used to detect changes in workspace configuration within the last 24 hours.",
        "query": "SELECT event_time, user_identity.email, workspace_id, request_params.workspaceConfKeys, request_params.workspaceConfValues, count(*) AS total FROM system.access.audit WHERE action_name = 'workspaceConfEdit' AND event_time >= current_timestamp() - INTERVAL 24 HOURS GROUP BY 1, 2, 3, 4, 5 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "changes_to_workspace_configuration",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following changes to workspace configurations within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "data_downloads_from_control_plane",
        "description": "Databricks allows customers to configure whether they want users to be able to download notebook or SQL query results, but some customers might want to monitor and report rather than prevent entirely. The following query can be used to detect high numbers of downloads of results from notebooks, Databricks SQL, Unity Catalog volumes and MLflow, as well as the exporting of notebooks in formats that may contain query results within the last 24 hours.",
        "query": "with downloads AS (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, collect_set(workspace_id) AS workspace_ids, collect_set(service_name) AS service_names, collect_set(action_name) AS action_names, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND (action_name IN ('downloadPreviewResults', 'downloadLargeResults', 'filesGet', 'getModelVersionDownloadUri', 'getModelVersionSignedDownloadUri') OR (action_name = 'workspaceExport' AND request_params.workspaceExportFormat != 'SOURCE') OR (action_name = 'downloadQueryResult' AND request_params.fileType != 'arrows')) GROUP BY 1, 2, 3) SELECT * FROM downloads WHERE total > 20 ORDER BY total DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "data_downloads_from_control_plane",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following high number of downloads from the control plane within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "20"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "data_downloads_from_control_plane_last_90_days",
        "description": "Spikes in the number of downloads could indicate attempts to exfiltrate data.",
        "query": "SELECT event_date, ifnull(user_identity.email, request_params.user) AS email, workspace_id, action_name, count(*) AS number_of_downloads FROM system.access.audit WHERE event_time >= current_date() - INTERVAL 90 DAYS AND (action_name IN ('downloadPreviewResults', 'downloadLargeResults', 'filesGet', 'getModelVersionDownloadUri', 'getModelVersionSignedDownloadUri') OR (action_name = 'workspaceExport' AND request_params.workspaceExportFormat != 'SOURCE') OR (action_name = 'downloadQueryResult' AND request_params.fileType != 'arrows')) GROUP BY 1, 2, 3, 4 ORDER BY event_date DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
      {
        "name": "ip_access_list_failures",
        "description": "Databricks allows customers to configure IP Access Lists to restrict access to their account & workspaces. However, they may want to monitor and be alerted whenever access is attempted from an untrusted network. The following query can be used to detect all IpAccessDenied and accountIpAclsValidationFailed events within the last 24 hours.",
        "query": "SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, workspace_id, ifnull(user_identity.email, request_params.user) AS email, source_ip_address, collect_set(action_name) AS action_names, collect_set(response.error_message) AS error_messages, collect_set(request_params.path) AS urls, collect_set(response.status_code) AS status_codes, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name IN ('IpAccessDenied', 'accountIpAclsValidationFailed') GROUP BY 1, 2, 3, 4, 5 ORDER BY total DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "ip_access_list_failures",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following attempts to access the control plane from unauthorized networks within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "ip_access_list_failures_last_90_days",
        "description": "Repeated IP access list failures could indicate attempts to brute force access to your lakehouse, or internal users trying to connect from untrusted networks.",
        "query": "SELECT event_date, workspace_id, source_ip_address, count(*) AS number_of_failures FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND action_name IN ('IpAccessDenied', 'accountIpAclsValidationFailed') GROUP BY 1, 2, 3 ORDER BY event_date DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
      {
        "name": "ip_access_list_changes",
        "description": "Databricks allows customers to configure IP access lists to restrict access to their account & workspaces. However, they may want to monitor and be alerted whenever thos IP access lists change. The following query can be used to detect all createIpAccessList, deleteIpAccessList and updateIpAccessList events within the last 24 hours.",
        "query": "SELECT event_time, user_identity.email, workspace_id, action_name, request_params.ipAccessListId, response.status_code, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name IN ('createIpAccessList', 'deleteIpAccessList', 'updateIpAccessList') GROUP BY 1, 2, 3, 4, 5, 6 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "ip_access_list_changes",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following attempts to change the IP access list settings of a workspace within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "databricks_access_to_customer_workspaces",
        "description": "This query can be used to detect logins to your workspace via the Databricks support process. This access is tied to a support ticket while also complying with your workspace configuration that may disable such access. The following query can be used to detect Databricks access to your workspaces within the last 24 hours.",
        "query": "SELECT event_time, workspace_id, request_params.user, request_params.approver, request_params.duration, request_params.reason, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name = 'databricksAccess' GROUP BY 1, 2, 3, 4, 5, 6 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "databricks_access_to_customer_workspaces",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following logins to your workspaces from Databricks employees within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "databricks_access_to_customer_workspaces_last_90_days",
        "description": "All logins to your workspace via the Databricks support process. This access is tied to a support ticket while also complying with your workspace configuration that may disable such access.",
        "query": "SELECT event_time, workspace_id, request_params.user, request_params.approver, request_params.duration, request_params.reason, count(*) AS total FROM system.access.audit WHERE event_time >= current_date() - INTERVAL 90 DAYS AND action_name = 'databricksAccess' GROUP BY 1, 2, 3, 4, 5, 6 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
      {
        "name": "terms_of_service_changes",
        "description": "As Databricks rolls out new products and features, customers may occassionally have to agree to changes in our Terms of Service before they can opt-in to the new feature. Some customers might want to monitor when an account admin accepts such terms of service changes. The following SQL query can be used to detect any acceptance or sending of Terms of Service changes within the last 24 hours",
        "query": "SELECT event_time, user_identity.email, request_params.account_id, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, action_name, count(*) AS total FROM system.access.audit WHERE  event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name IN ('acceptTos', 'sendTos') GROUP BY 1, 2, 3, 4, 5 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "terms_of_service_changes",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following Terms of Service changes detected within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "account_settings_changes",
        "description": "Many account-level settings perform a security-enforcing function. The following SQL query can be used to detect changes in account level settings within the last 24 hours.",
        "query": "SELECT event_time, user_identity.email, account_id, request_params.settingTypeName AS setting_name, request_params.settingValueForAudit AS setting_value, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND audit_level = 'ACCOUNT_LEVEL' AND service_name = 'accounts' AND action_name = 'setSetting' GROUP BY 1, 2, 3, 4, 5 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "account_settings_changes",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following account settings changes detected within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "global_init_script_changes",
        "description": "Global init scripts run arbitrary code that is executed on every cluster. This can be a very powerful capability but with great power comes great responsibility. The following SQL query can be used to detect the creation, update and deletion of global init scripts within the last 24 hours.",
        "query": "SELECT event_time, workspace_id, user_identity.email, source_ip_address, action_name, request_params.name, request_params.script_id, request_params.enabled, request_params.`script-SHA256`, response.status_code, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'globalInitScripts' GROUP BY 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "global_init_script_changes",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following changes to global init scripts within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "install_library_on_all_clusters",
        "description": "Installing libraries on all clusters is an anti-pattern. Customers should use cluster-scoped or notebook-scoped libraries for many different reasons including but not limited to transparency, recreatability, reliability and security. The following SQL query can be used to detect any attempts to install libraries on all clusters within the last 24 hours.",
        "query": "SELECT event_time, workspace_id, user_identity.email, request_params.library, response.status_code, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'clusterLibraries' AND action_name = 'installLibraryOnAllClusters' GROUP BY 1, 2, 3, 4, 5 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "install_library_on_all_clusters",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following attempts to install libraries on all clusters detected within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "mount_point_creation",
        "description": "Mount points are considered an anti-pattern because mount points do not have the same strong data governance features as external locations or volumes in Unity Catalog. The following query can be used to detect new mount points created or changed within the last 24 hours",
        "query": "SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, collect_set(workspace_id) AS workspace_ids, collect_set(request_params.mountPoint) AS mount_points, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name = 'mount' GROUP BY 1, 2, 3 ORDER BY total DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "mount_point_creation",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following mount points created within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "long_lifetime_token_generation",
        "description": "Personal access tokens should be treated like a credential and protected at all times. As well as being managed by the Token Management API and secured with additional protections like IP Access Lists, they should only be generated with a short lifetime. The following SQL query can be used to detect the generation of PAT tokens with a lifetime of greater than 72 hours.",
        "query": "SELECT event_time, workspace_id, user_identity.email, timestamp_millis(cast(request_params.tokenExpirationTime AS BIGINT)) AS token_expiration, timestampdiff(HOUR, event_time, timestamp_millis(cast(request_params.tokenExpirationTime AS BIGINT))) AS token_duration_in_hours, request_params.tokenHash, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name = 'generateDbToken' AND timestampdiff(HOUR, event_time, timestamp_millis(cast(request_params.tokenExpirationTime AS BIGINT))) > 72 GROUP BY 1, 2, 3, 4, 5, 6 ORDER BY event_time DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "long_lifetime_token_generation",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following tokens generated with a lifetime of >72 hours within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "destructive_activities",
        "description": "A high number of destructive activities (such as delete* events) may indicate a malicious attempt to cause disruption and harm. The following SQL query can be used to detect users who have attempted a high number (>50) destructive activities within the last 24 hours. This query filters out activities from Databricks System-Users, although you could optionally add them back in.",
        "query": "SELECT * FROM (SELECT event_date, user_identity.email, collect_set(if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id)) AS workspace_ids, collect_set(service_name) AS service_names, size(collect_set(service_name)) AS num_services, collect_set(action_name) AS action_names, size(collect_set(action_name)) AS num_actions, count(*) AS num_destructive_activities FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND user_identity.email NOT IN ('System-User') AND (startswith(action_name, 'delete') OR contains(lower(action_name), 'delete') OR contains(lower(action_name), 'trash')) GROUP BY 1, 2) WHERE num_destructive_activities > 50 ORDER BY num_destructive_activities DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "destructive_activities",
          "options": {
            "column": "num_destructive_activities",
            "custom_body": "<h3>There have been the following high numbers of destructive activities detected within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">=",
            "value": "50"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "destructive_activities_last_90_days",
        "description": "A spike in the number of destructive activities (such as delete* events) may indicate a malicious attempt to cause disruption and harm.",
        "query": "SELECT event_date, user_identity.email, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, service_name, action_name, count(*) AS num_destructive_activities FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND user_identity.email NOT IN ('System-User') AND (startswith(action_name, 'delete') OR contains(lower(action_name), 'delete') OR contains(lower(action_name), 'trash')) GROUP BY 1, 2, 3, 4, 5 ORDER BY event_date DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
      {
        "name": "potential_privilege_escalation",
        "description": "A high number of permission changes could indicate privelege escalation. The following SQL query can be used to detect users who have made a high number (>25) within an hour period over the last 24 hours. This query filters out changes made by Databricks System-Users, although you could optionally add them back in.",
        "query": "SELECT * FROM (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, collect_set(if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id)) AS workspace_ids, collect_set(service_name) AS service_names, size(collect_set(service_name)) AS num_services, collect_set(action_name) AS action_names, size(collect_set(action_name)) AS num_actions, count(*) AS num_permissions_changes FROM system.access.audit WHERE action_name IN ('addPrincipalToGroup', 'changeDatabricksSqlAcl', 'changeDatabricksWorkspaceAcl', 'changeDbTokenAcl', 'changePasswordAcl', 'changeServicePrincipalAcls', 'generateDbToken', 'setAdmin', 'changeClusterAcl', 'changeClusterPolicyAcl', 'changeWarehouseAcls', 'changePermissions', 'transferObjectOwnership', 'changePipelineAcls', 'changeFeatureTableAcl', 'addPrincipalToGroup', 'changeIamRoleAcl', 'changeInstancePoolAcl', 'changeJobAcl', 'resetJobAcl', 'changeRegisteredModelAcl', 'changeInferenceEndpointAcl', 'putAcl', 'changeSecurableOwner', 'grantPermission', 'changeWorkspaceAcl', 'updateRoleAssignment', 'setAccountAdmin', 'changeAccountOwner', 'updatePermissions', 'updateSharePermissions') AND event_time >= current_timestamp() - INTERVAL 24 HOURS AND user_identity.email NOT IN ('System-User') GROUP BY 1, 2, 3) WHERE num_permissions_changes > 25 ORDER BY num_permissions_changes DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "potential_privilege_escalation",
          "options": {
            "column": "num_permissions_changes",
            "custom_body": "<h3>There have been the following high numbers of permissions changes detected within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">=",
            "value": "25"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "potential_privilege_escalation_last_90_days",
        "description": "A spike in the number of permission changes could indicate privilege escalation.",
        "query": "SELECT event_date, user_identity.email, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, service_name, action_name, count(*) AS num_permissions_changes FROM system.access.audit WHERE action_name IN ('addPrincipalToGroup', 'changeDatabricksSqlAcl', 'changeDatabricksWorkspaceAcl', 'changeDbTokenAcl', 'changePasswordAcl', 'changeServicePrincipalAcls', 'generateDbToken', 'setAdmin', 'changeClusterAcl', 'changeClusterPolicyAcl', 'changeWarehouseAcls', 'changePermissions', 'transferObjectOwnership', 'changePipelineAcls', 'changeFeatureTableAcl', 'addPrincipalToGroup', 'changeIamRoleAcl', 'changeInstancePoolAcl', 'changeJobAcl', 'resetJobAcl', 'changeRegisteredModelAcl', 'changeInferenceEndpointAcl', 'putAcl', 'changeSecurableOwner', 'grantPermission', 'changeWorkspaceAcl', 'updateRoleAssignment', 'setAccountAdmin', 'changeAccountOwner', 'updatePermissions', 'updateSharePermissions') AND event_date >= current_date() - INTERVAL 90 DAYS AND user_identity.email NOT IN ('System-User') GROUP BY 1, 2, 3, 4, 5 ORDER BY event_date DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
      {
        "name": "repeated_access_to_secrets",
        "description": "Repeated attempts to access secrets could indicate an attempt to steal credentials. The following SQL query can be used to detect users who have attempted a high number (>10) of attempts to access secrets within an hour period over the last 24 hours. This query filters out requests from Databricks System-Users, although you could optionally add them back in.",
        "query": "SELECT * FROM (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, collect_set(workspace_id) AS workspace_ids, size(collect_set(request_params.scope)) AS num_scopes_accessed, collect_set(request_params.scope) AS secret_scopes, size(collect_set(request_params.key)) AS num_keys_accessed, collect_set(request_params.key) AS secret_keys, count(*) AS num_requests FROM system.access.audit WHERE action_name = 'getSecret' AND event_time >= current_timestamp() - INTERVAL 24 HOURS AND user_identity.email NOT IN ('System-User') GROUP BY 1, 2, 3) WHERE num_keys_accessed >= 10 ORDER BY num_keys_accessed DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "repeated_access_to_secrets",
          "options": {
            "column": "num_keys_accessed",
            "custom_body": "<h3>There have been the repeated attempts to access secrets within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">=",
            "value": "10"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "access_to_secrets_last_90_days",
        "description": "A spike in the number of requests to access secrets could indicate attempts to steal credentials.",
        "query": "SELECT event_date, user_identity.email, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, concat(request_params.scope, '/', request_params.key) AS secret, count(*) AS num_requests FROM system.access.audit WHERE action_name = 'getSecret' AND event_date >= current_date() - INTERVAL 90 DAYS AND user_identity.email NOT IN ('System-User') GROUP BY 1, 2, 3, 4 ORDER BY event_date DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
      {
        "name": "access_to_multiple_workspaces",
        "description": "The same user accessing multiple workspaces within a short time frame could indicate lateral movement, or malicious attempts to increase the blast radius of an attack. The following SQL query can be used to detect users who have accessed a high number (>5) of different workspaces within the last 24 hours. This query filters out requests from unknown and Databricks System-Users, although you could optionally add them back in.",
        "query": "SELECT * FROM (SELECT event_date, user_identity.email, collect_set(workspace_id) AS workspace_ids, count(distinct workspace_id) AS num_workspaces_accessed FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND user_identity.email NOT IN ('System-User', 'unknown') GROUP BY 1, 2) WHERE num_workspaces_accessed >= 5 ORDER BY num_workspaces_accessed DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "access_to_multiple_workspaces",
          "options": {
            "column": "num_workspaces_accessed",
            "custom_body": "<h3>There have been the following attempts to access multiple workspaces within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">=",
            "value": "5"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "use_of_print_statements",
        "description": "Databricks supports verbose audit logging, which can be useful in highly regulated environments in which all commands run interactively by a user must be recorded. Verbose audit logs can also be useful for monitoring compliance with coding standards. For example, let's suppose your organization has a policy that print() statements should not be used, the following SQL query could be used to monitor compliance with such a policy by detecting uses of the print() statement within the last 24 hours.",
        "query": "SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, collect_set(workspace_id) AS workspace_ids, collect_set(service_name) AS service_names, collect_set(request_params.commandLanguage) AS command_languages, collect_set(request_params.commandText) AS commands, collect_set(request_params.status) AS statuses, collect_set(request_params.notebookId) AS notebook_ids, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name = 'runCommand' AND request_params.commandText rlike 'print[/s]?(?! e)(.)+' GROUP BY 1, 2, 3 ORDER BY total DESC",
        "parent": "system_tables/audit/admin/queries/",
        "alert": {
          "name": "use_of_print_statements",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following use of print statements within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/admin/alerts/"
        }
      },
      {
        "name": "ip_addresses_used_to_access_databricks",
        "description": "The following SQL query will show you which IP addresses and the number of requests for each have been used to access your workspace or account over the last 90 days.",
        "query": "SELECT regexp_replace(source_ip_address, '(:\\\\d*)', '') AS source_ip_address, CASE WHEN audit_level = 'ACCOUNT_LEVEL' AND service_name != 'unityCatalog' THEN 'account' WHEN audit_level = 'ACCOUNT_LEVEL' AND service_name = 'unityCatalog' THEN 'unity_catalog' WHEN audit_level = 'WORKSPACE_LEVEL' THEN 'workspace' ELSE NULL END AS service, count(*) AS total_requests FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND source_ip_address NOT IN ('', '0.0.0.0', '127.0.0.1') GROUP BY 1, 2 ORDER BY total_requests DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
          {
        "name": "ip_address_ranges_used_to_access_databricks",
        "description": "The following SQL query will show you which IP address ranges and the number of requests for each have been used to access your workspaces or account over the last 90 days.",
        "query": "SELECT concat(substring_index(source_ip_address, '.', 3), '.0/24') AS source_ip_range, CASE WHEN audit_level = 'ACCOUNT_LEVEL' AND service_name != 'unityCatalog' THEN 'account' WHEN audit_level = 'ACCOUNT_LEVEL' AND service_name = 'unityCatalog' THEN 'unity_catalog' WHEN audit_level = 'WORKSPACE_LEVEL' THEN 'workspace' ELSE NULL END AS service, count(*) AS total_requests FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND source_ip_address NOT IN ('', '0.0.0.0', '127.0.0.1') GROUP BY concat(substring_index(source_ip_address, '.', 3), '.0/24'), 2 ORDER BY total_requests DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
      {
        "name": "repeated_unauthorized_uc_requests",
        "description": "Repeated unauthorized UC requests could indicate privilege escalation, data exfiltration attempts or an attacker trying to brute force access to your data. The following query can be used to detect repeated unauthorized UC requests over a 60 minute period within the last 24 hours.",
        "query": "WITH failed_requests AS (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, request_params.metastore_id, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, action_name, response.error_message FROM system.access.audit WHERE service_name = 'unityCatalog' AND response.status_code IN (401, 403) AND WINDOW(event_time, '60 minutes').end >= current_timestamp() - INTERVAL 24 HOURS), failed_requests_agg AS (SELECT window_start, window_end, email, metastore_id, collect_set(workspace_id) AS workspace_ids,collect_set(action_name) AS action_names, collect_set(error_message) AS error_messages, count(*) AS total FROM failed_requests GROUP BY 1, 2, 3, 4) SELECT * FROM failed_requests_agg WHERE total > 25 ORDER BY total DESC",
        "parent": "system_tables/audit/unity_catalog/queries/",
        "alert": {
          "name": "repeated_unauthorized_uc_requests",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following unauthorized UC requests within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "25"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/unity_catalog/alerts/"
        }
      },
      {
        "name": "repeated_unauthorized_uc_data_requests",
        "description": "Repeated unauthorized UC data requests could indicate privilege escalation, data exfiltration attempts or an attacker trying to brute force access to your data. The following query can be used to detect repeated unauthorized UC data access ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') requests over a 60 minute period within the last 24 hours.",
        "query": "WITH failed_data_access AS (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end,user_identity.email, request_params.metastore_id, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, action_name, CASE WHEN isnotnull(request_params.table_full_name) THEN request_params.table_full_name WHEN isnotnull(request_params.volume_full_name) THEN request_params.volume_full_name WHEN isnotnull(request_params.name) THEN request_params.name WHEN isnotnull(request_params.url) THEN request_params.url  WHEN isnotnull(request_params.table_url) THEN request_params.table_url WHEN isnotnull(request_params.table_id) THEN request_params.table_id WHEN isnotnull(request_params.volume_id) THEN request_params.volume_id ELSE NULL END AS securable, response.error_message FROM system.access.audit WHERE action_name IN ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') AND response.status_code IN (401, 403) AND WINDOW(event_time, '60 minutes').end >= current_timestamp() - INTERVAL 24 HOURS),  failed_data_access_agg AS (SELECT window_start, window_end, email, metastore_id, collect_set(workspace_id) AS workspace_ids, collect_set(action_name) AS action_names, collect_set(securable) AS securables, collect_set(error_message) AS errors, count(*) AS total FROM failed_data_access GROUP BY 1, 2, 3, 4) SELECT * FROM failed_data_access_agg WHERE total > 15 ORDER BY total DESC",
        "parent": "system_tables/audit/unity_catalog/queries/",
        "alert": {
          "name": "repeated_unauthorized_uc_data_requests",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following unauthorized UC data requests within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "15"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/unity_catalog/alerts/"
        }
      },
      {
        "name": "unauthorized_uc_data_requests_last_90_days",
        "description": "Repeated unauthorized UC data requests could indicate privilege escalation, data exfiltration attempts or an attacker trying to brute force access to your data.",
        "query": "SELECT event_date, ifnull(user_identity.email, request_params.user) AS email, request_params.workspace_id, action_name, count(*) AS total FROM system.access.audit WHERE action_name IN ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') AND response.status_code IN (401, 403) AND event_date >= current_date() - INTERVAL 90 DAYS GROUP BY 1, 2, 3, 4 ORDER BY event_date DESC",
        "parent": "system_tables/audit/unity_catalog/queries/"
        },
      {
        "name": "high_number_of_read_writes",
        "description": "A high number of read/writes, particularly where the writes are to different locations could indicate data exfiltration attempts. The following  query can be used to detect a high number of read/writes of UC securables (>20) within an hour window over the last 24 hours, particularly where the user is writing to different locations to the reads.",
        "query": "WITH read_writes AS (SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, user_identity.email, request_params.metastore_id, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, CASE WHEN contains(request_params.operation, 'CREATE') THEN 'WRITE' WHEN contains(request_params.operation, 'WRITE') THEN 'WRITE' WHEN contains(request_params.operation, 'READ') THEN 'READ' ELSE NULL END AS operation, request_params.operation AS full_operation, CASE WHEN isnotnull(request_params.table_full_name) THEN request_params.table_full_name WHEN isnotnull(request_params.volume_full_name) THEN request_params.volume_full_name WHEN isnotnull(request_params.url) THEN request_params.url  WHEN isnotnull(request_params.table_url) THEN request_params.table_url WHEN isnotnull(request_params.table_id) THEN request_params.table_id WHEN isnotnull(request_params.volume_id) THEN request_params.volume_id ELSE NULL END AS securable FROM system.access.audit WHERE action_name IN ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential') AND WINDOW(event_time, '60 minutes').end >= current_timestamp() - INTERVAL 24 HOURS), read_writes_agg AS (SELECT window_start, window_end, email, metastore_id, collect_set(workspace_id) AS workspace_ids,collect_set(operation) AS operations, collect_set(securable) FILTER(WHERE operation = 'READ') AS read_securables, collect_set(securable) FILTER(WHERE operation = 'WRITE') AS write_securables, count(distinct securable) FILTER(WHERE operation = 'READ') AS num_reads, count(distinct securable) FILTER(WHERE operation = 'WRITE') AS num_writes, count(distinct operation, securable) AS total_read_writes FROM read_writes GROUP BY 1, 2, 3, 4 ORDER BY total_read_writes DESC), read_writes_high AS (SELECT window_start, window_end, email, metastore_id, workspace_ids, operations, read_securables, write_securables, array_except(write_securables, read_securables) AS writes_to_different_locations, num_reads, num_writes, size(array_except(write_securables, read_securables)) AS num_writes_to_different_locations, total_read_writes FROM read_writes_agg) SELECT * FROM read_writes_high WHERE num_reads > 20 AND num_writes > 20 AND num_writes_to_different_locations > 0 ORDER BY num_writes_to_different_locations DESC",
        "parent": "system_tables/audit/unity_catalog/queries/",
        "alert": {
          "name": "high_number_of_read_writes",
          "options": {
            "column": "num_writes_to_different_locations",
            "custom_body": "<h3>There have been the following high number of reads/writes to UC securables within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/unity_catalog/alerts/"
        }
      },
      {
        "name": "read_writes_last_90_days",
        "description": "A spike in the number of read/writes (particularly writes) could indicate attempts to exfiltrate data.",
        "query": "SELECT event_date, user_identity.email, if(isnotnull(request_params.workspace_id), request_params.workspace_id, workspace_id) AS workspace_id, CASE WHEN contains(request_params.operation, 'CREATE') THEN 'WRITE' WHEN contains(request_params.operation, 'WRITE') THEN 'WRITE' WHEN contains(request_params.operation, 'READ') THEN 'READ' ELSE NULL END AS operation, request_params.operation AS full_operation, CASE WHEN isnotnull(request_params.table_full_name) THEN request_params.table_full_name WHEN isnotnull(request_params.volume_full_name) THEN request_params.volume_full_name WHEN isnotnull(request_params.url) THEN request_params.url WHEN isnotnull(request_params.table_url) THEN request_params.table_url WHEN isnotnull(request_params.table_id) THEN request_params.table_id WHEN isnotnull(request_params.volume_id) THEN request_params.volume_id ELSE NULL END AS securable, COUNT(*) AS number_of_read_writes FROM system.access.audit WHERE action_name IN ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential') AND event_date >= current_date() - INTERVAL 90 DAYS GROUP BY 1, 2, 3, 4, 5, 6 ORDER BY event_date DESC",
        "parent": "system_tables/audit/admin/queries/"
        },
      {
        "name": "delta_sharing_recipients_without_ip_acls",
        "description": "If you’re sharing personal data, delta sharing recipients should always be secured with IP access lists. The following SQL query can be used to detect the creation or update of delta sharing recipients which do not have IP access lists defined within the last 24 hours.",
        "query": "SELECT event_time, user_identity.email, CASE WHEN request_params.name IS NOT NULL THEN request_params.name WHEN request_params.name_arg IS NOT NULL THEN request_params.name_arg ELSE NULL END AS delta_share, request_params.ip_access_list, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name IN ('createRecipient') AND request_params.ip_access_list IS NULL GROUP BY 1, 2, 3, 4 ORDER BY event_time DESC",
        "parent": "system_tables/audit/unity_catalog/queries/",
        "alert": {
          "name": "delta_sharing_recipients_without_ip_acls",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following Delta Sharing recipients created without IP ACLs within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/unity_catalog/alerts/"
        }
      },
      {
        "name": "delta_sharing_ip_access_list_failures",
        "description": "If you’re sharing personal data, delta sharing recipients should always be secured with IP access lists. The following SQL query can be used to detect Delta Sharing data access requests ('deltaSharingQueryTable', 'deltaSharingQueryTableChanges') which have failed IP access list checks within the last 24 hours.",
        "query": "SELECT WINDOW(event_time, '60 minutes').start AS window_start, WINDOW(event_time, '60 minutes').end AS window_end, source_ip_address, request_params.metastore_id, collect_set(request_params.name) AS share_names, collect_set(request_params.share) AS shares, collect_set(request_params.recipient_name) AS recipient_names, collect_set(request_params.recipient_authentication_type) AS authentication_types, COUNT(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'unityCatalog' AND action_name IN ('deltaSharingQueryTable', 'deltaSharingQueryTableChanges') AND request_params.is_ip_access_denied = 'true' GROUP BY 1, 2, 3, 4 ORDER BY total DESC",
        "parent": "system_tables/audit/unity_catalog/queries/",
        "alert": {
          "name": "delta_sharing_ip_access_list_failures",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following Delta Sharing data access requests which have failed IP access list rules within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/unity_catalog/alerts/"
        }
      },
      {
        "name": "delta_sharing_recipient_token_lifetime_change",
        "description": "Delta Sharing recipient tokens are valid for the lifetime that you specify. As well as protecting Delta Shares via IP access lists, you should also ensure that the lifetime of a recipient token is set to a value that is suitable for the data within the metastore it is accessing. Once you have set a token lifetime, you may want to monitor whether an account admin ever changes that value. The following SQL can be used to detect changes to the Delta Sharing recipient token lifetime for a metastore within the last 24 hours.",
        "query": "SELECT event_time, user_identity.email, account_id, request_params.metastore_id, request_params.delta_sharing_recipient_token_lifetime_in_seconds, response.status_code, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND action_name = 'updateMetastore' AND request_params.delta_sharing_recipient_token_lifetime_in_seconds IS NOT NULL GROUP BY 1, 2, 3, 4, 5, 6 ORDER BY total DESC",
        "parent": "system_tables/audit/unity_catalog/queries/",
        "alert": {
          "name": "delta_sharing_recipient_token_lifetime_change",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following changes to a Delta Sharing recipient token lifetime within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/unity_catalog/alerts/"
        }
      },
      {
        "name": "most_popular_data_products_last_90_days",
        "description": "Databricks Unity Catalog is the industry’s first unified governance solution for data and AI on the lakehouse. The main benefit of this unification is that you can define once and secure everywhere, but it also means that appropriately privileged users can report on the most popular data products across an organisation. The following SQL query will show you the most popular data assets by number of requests over the last 90 days.",
        "query": "SELECT * FROM (SELECT CASE WHEN isnotnull(request_params.table_full_name) THEN request_params.table_full_name WHEN isnotnull(request_params.volume_full_name) THEN request_params.volume_full_name WHEN isnotnull(request_params.name) THEN request_params.name WHEN isnotnull(request_params.url) THEN request_params.url WHEN isnotnull(request_params.table_url) THEN request_params.table_url WHEN isnotnull(request_params.table_id) THEN request_params.table_id WHEN isnotnull(request_params.volume_id) THEN request_params.volume_id ELSE NULL END AS securable, CASE WHEN isnotnull(request_params.table_full_name) THEN 'TABLE' WHEN isnotnull(request_params.volume_full_name) THEN 'VOLUME' WHEN isnotnull(request_params.share) THEN 'DELTA_SHARE' WHEN isnotnull(request_params.url) THEN 'EXTERNAL_LOCATION' WHEN isnotnull(request_params.table_url) THEN 'TABLE' WHEN isnotnull(request_params.table_id) THEN 'TABLE' WHEN isnotnull(request_params.volume_id) THEN 'VOLUME' ELSE NULL END AS securable_type, count(*) AS total_requests FROM system.access.audit WHERE action_name IN ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') AND response.status_code  = 200 AND event_date >= current_date() - INTERVAL 90 DAYS GROUP BY 1, 2) WHERE NOT startswith(securable, '__databricks_internal.') ORDER BY total_requests DESC LIMIT 500",
        "parent": "system_tables/audit/unity_catalog/queries/"
        },
      {
        "name": "most_privileged_users",
        "description": "Identifying our most privileged users can help us to take a risk based approach to security. The following SQL query will provide a relatively simple view of our most privileged users, by showing those with the highest number of different grants to each securable type.",
        "query": "WITH catalog_privileges AS (SELECT grantee, 'catalog' AS securable_type, count(*) AS total FROM system.information_schema.catalog_privileges GROUP BY 1, 2), external_location_privileges AS (SELECT grantee, 'external_location' AS securable_type, count(*) AS total FROM system.information_schema.external_location_privileges GROUP BY 1, 2), metastore_privileges AS (SELECT grantee, 'metastore' AS securable_type, count(*) AS total FROM system.information_schema.metastore_privileges GROUP BY 1, 2), routine_privileges AS (SELECT grantee, 'function' AS securable_type, count(*) AS total FROM system.information_schema.routine_privileges GROUP BY 1, 2), schema_privileges AS (SELECT grantee, 'schema' AS securable_type, count(*) AS total FROM system.information_schema.schema_privileges GROUP BY 1, 2), storage_credential_privileges AS (SELECT grantee, 'storage_credential' AS securable_type, count(*) AS total FROM system.information_schema.storage_credential_privileges GROUP BY 1, 2), table_privileges AS (SELECT grantee, 'table' AS securable_type, count(*) AS total FROM system.information_schema.table_privileges GROUP BY 1, 2), volume_privileges AS (SELECT grantee, 'volume' AS securable_type, count(*) AS total FROM system.information_schema.volume_privileges GROUP BY 1, 2) SELECT grantee, securable_type, SUM(totaL) AS number_of_grants FROM (SELECT * FROM catalog_privileges UNION ALL SELECT * FROM external_location_privileges UNION ALL SELECT * FROM metastore_privileges UNION ALL SELECT * FROM routine_privileges UNION ALL SELECT * FROM schema_privileges UNION ALL SELECT * FROM storage_credential_privileges UNION ALL SELECT * FROM table_privileges UNION ALL SELECT * FROM volume_privileges) GROUP BY 1, 2 ORDER BY number_of_grants DESC",
        "parent": "system_tables/audit/unity_catalog/queries/"
        },
      {
        "name": "ip_addresses_used_to_access_uc_data",
        "description": "The following SQL query will show you the IP addresses used to access Unity Catalog securables ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') actions over the last 90 days.",
        "query": "SELECT regexp_replace(source_ip_address, '(:\\\\d*)', '') AS source_ip_address, CASE WHEN isnotnull(request_params.table_full_name) THEN 'TABLE' WHEN isnotnull(request_params.volume_full_name) THEN 'VOLUME' WHEN isnotnull(request_params.url) THEN 'EXTERNAL_LOCATION' WHEN isnotnull(request_params.table_url) THEN 'TABLE' WHEN isnotnull(request_params.table_id) THEN 'TABLE' WHEN isnotnull(request_params.volume_id) THEN 'VOLUME' WHEN isnotnull(request_params.share) THEN 'DELTA_SHARE' ELSE NULL END AS securable_type, count(*) AS total_requests FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND source_ip_address NOT IN ('', '0.0.0.0', '127.0.0.1') AND action_name IN ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') GROUP BY 1, 2 ORDER BY total_requests DESC",
        "parent": "system_tables/audit/unity_catalog/queries/"
        },
      {
        "name": "ip_address_ranges_used_to_access_uc_data",
        "description": "The following SQL query will show you the IP addresse ranges used to access Unity Catalog securables ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') actions over the last 90 days.",
        "query": "SELECT concat(substring_index(source_ip_address, '.', 3), '.0/24') AS source_ip_range, CASE WHEN isnotnull(request_params.table_full_name) THEN 'TABLE' WHEN isnotnull(request_params.volume_full_name) THEN 'VOLUME' WHEN isnotnull(request_params.url) THEN 'EXTERNAL_LOCATION' WHEN isnotnull(request_params.table_url) THEN 'TABLE' WHEN isnotnull(request_params.table_id) THEN 'TABLE' WHEN isnotnull(request_params.volume_id) THEN 'VOLUME' WHEN isnotnull(request_params.share) THEN 'DELTA_SHARE' ELSE NULL END AS securable_type, count(*) AS total_requests FROM system.access.audit WHERE event_date >= current_date() - INTERVAL 90 DAYS AND source_ip_address NOT IN ('', '0.0.0.0', '127.0.0.1') AND action_name IN ('generateTemporaryTableCredential', 'generateTemporaryPathCredential', 'generateTemporaryVolumeCredential', 'deltaSharingQueryTable', 'deltaSharingQueryTableChanges') GROUP BY 1, 2 ORDER BY total_requests DESC",
        "parent": "system_tables/audit/unity_catalog/queries/"
        },
      {
        "name": "clam_av_infected_files_detected",
        "description": "Customers using one of our compliance security profile offerings have additional monitoring agents including antivirus installed on their data plane hosts. The following query can be used to detect all antivirus scan events during which infected files have been detected within the last 24 hours. Note that this SQL query/alert will trigger when the ClamAV scan has completed, which may be several hours after the infected file has been found. See clam_av_infected_files_found for a query/alert that will trigger as soon as an infected file has been found.",
        "query": "SELECT event_time, workspace_id, request_params.instanceId, regexp_extract(response.result, ('Infected files: (\\\\d+)')) AS infected_files FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'clamAVScanService-dataplane' AND startswith(response.result, 'Infected files:') AND regexp_extract(response.result, ('Infected files: (\\\\d+)')) > 0 ORDER BY event_time DESC",
        "parent": "system_tables/audit/compliance_security_profile/queries/",
        "alert": {
          "name": "clam_av_infected_files_detected",
          "options": {
            "column": "infected_files",
            "custom_body": "<h3>There have been the following infected files detected by ClamAV within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/compliance_security_profile/alerts/"
        }
      },
      {
        "name": "clam_av_infected_files_found",
        "description": "Customers using one of our compliance security profile offerings have additional monitoring agents including antivirus installed on their data plane hosts. The following query can be used to detect all antivirus scan events during which infected files have been found within the last 24 hours. Note, that this query/alert will detect infected files as soon as they have been found, rather than when the ClamAV scan finishes.",
        "query": "SELECT event_time, workspace_id, request_params.instanceId, regexp_extract(response.result, ': (.*) FOUND') AS signature, regexp_extract(response.result, '(.*):') AS file_path FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'clamAVScanService-dataplane' AND contains(response.result, 'FOUND') ORDER BY event_time DESC",
        "parent": "system_tables/audit/compliance_security_profile/queries/",
        "alert": {
          "name": "clam_av_infected_files_found",
          "options": {
            "column": "infected_files",
            "custom_body": "<h3>There have been the following infected files found by ClamAV within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/compliance_security_profile/alerts/"
        }
      },
      {
        "name": "capsule8_container_breakout_events",
        "description": "User code runs in low-privileged containers. A container escape could compromise the security of the cluster especially when running with user isolation for Unity Catalog or Table ACLs. Capsule8 provides a few alerts related to container isolation issues that should be investigated if triggered. The following query can be used to detect all container breakout events within the last 24 hours.",
        "query": "SELECT event_time, workspace_id, request_params.instanceId, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'capsule8-alerts-dataplane' AND action_name in ('Container Escape via Kernel Exploitation', 'Userland Container Escape', 'New File Executed in Container', 'Privileged Container Launched') GROUP BY 1, 2, 3 ORDER BY event_time DESC",
        "parent": "system_tables/audit/compliance_security_profile/queries/",
        "alert": {
          "name": "capsule8_container_breakout_events",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following container breakout events detected by Capsule8 within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/compliance_security_profile/alerts/"
        }
      },
      {
        "name": "capsule8_changes_to_host_security_settings",
        "description": "No untrusted code or end-user commands should be running on the host OS. There should be no process making changes to security configurations of the host VM. The following SQL query can be used to help us identify suspicious changes within the last 24 hours.",
        "query": "SELECT event_time, workspace_id, request_params.instanceId, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'capsule8-alerts-dataplane' AND action_name in ('Processor-Level Protections Disabled', 'AppArmor Disabled In Kernel', 'AppArmor Profile Modified', 'Boot Files Modified', 'Root Certificate Store Modified') GROUP BY 1, 2, 3 ORDER BY event_time DESC",
        "parent": "system_tables/audit/compliance_security_profile/queries/",
        "alert": {
          "name": "capsule8_changes_to_host_security_settings",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following changes to host security settings detected by Capsule8 within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/compliance_security_profile/alerts/"
        }
      },
      {
        "name": "capsule8_kernel_related_events",
        "description": "Kernel related events could be another indicator of malicious code running on the host. In particular there should be no kernel modules loaded or internal kernel functions being called by user code. The following SQL query can be used to detect any kernel related events within the last 24 hours.",
        "query": "SELECT event_time, workspace_id, request_params.instanceId, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'capsule8-alerts-dataplane' AND action_name in ('BPF Program Executed', 'Kernel Module Loaded', 'Kernel Exploit') GROUP BY 1, 2, 3 ORDER BY event_time DESC",
        "parent": "system_tables/audit/compliance_security_profile/queries/",
        "alert": {
          "name": "capsule8_kernel_related_events",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following kernel related events detected by Capsule8 within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/compliance_security_profile/alerts/"
        }
      },
      {
        "name": "capsule8_suspicious_host_activity",
        "description": "Given the architecture of the Databricks containerized runtime and host OS model, only trusted code should be making changes or executing on the host EC2. Changes to containers, evasive actions, or interactive shells could be due to suspicious activity on the host and should be reviewed. The following SQL query can be used to detect suspicious host activity within the last 24 hours.",
        "query": "SELECT event_time, workspace_id, request_params.instanceId, count(*) AS total FROM system.access.audit WHERE event_time >= current_timestamp() - INTERVAL 24 HOURS AND service_name = 'capsule8-alerts-dataplane' AND action_name in ('New File Executed in Container', 'Suspicious Interactive Shell', 'User Command Logging Evasion', 'Privileged Container Launched') GROUP BY 1, 2, 3 ORDER BY event_time DESC",
        "parent": "system_tables/audit/compliance_security_profile/queries/",
        "alert": {
          "name": "capsule8_suspicious_host_activity",
          "options": {
            "column": "total",
            "custom_body": "<h3>There have been the following suspicious host activity events detected by Capsule8 within the last 24 hours:</h3><br>{{QUERY_RESULT_TABLE}}<br><a href='{{QUERY_URL}}'>Link to query</a><br><a href='{{ALERT_URL}}'>Link to alert</a>",
            "custom_subject": "Alert {{ALERT_NAME}} changed status to {{ALERT_STATUS}} because the number of unexpected events is {{ALERT_CONDITION}} than {{ALERT_THRESHOLD}}",
            "muted": false,
            "op": ">",
            "value": "0"
          },
          "rearm": "3600",
          "parent": "system_tables/audit/compliance_security_profile/alerts/"
        }
      }
    ]
  }